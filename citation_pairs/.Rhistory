bmc_results[[i]]$article_id <- results[[i]]$records$identifier
bmc_results[[i]]$article_title <- results[[i]]$records$title
bmc_results[[i]]$dataset_id <- identifiers[i]
}
}
# bind resulting tibbles
bmc_results <- do.call(rbind, bmc_results)
# remove doi: prefix for consistency
bmc_results$article_id <- gsub("doi:", "", bmc_results$article_id)
return(bmc_results)
}
#' @param identifiers a vector of identifiers to be searched for
#'
#' @return tibble of matching dataset and publication identifiers
#' @export
#' @importFrom rscopus scopus_search
#' @examples
#'
#' identifiers <- c("10.18739/A22274", "10.18739/A2D08X", "10.5063/F1T151VR")
#' result <- citation_search_scopus(identifiers)
#'
citation_search_scopus <- function(identifiers) {
check_identifiers(identifiers)
if (length(identifiers) > 8){
message(paste0("Your result will take ~", length(identifiers)/9 ," seconds to return, since this function is rate limited to 9 calls per second."))
}
tmp <- keyring::key_get("scopus_key", keyring = "scythe")
results <- list()
for (i in 1:length(identifiers)) {
Sys.sleep(0.12)
results[[i]] <-
fromJSON(curl(paste0("https://api.elsevier.com/content/search/scopus?query=ALL:", identifiers[i], paste("&APIKey=",tmp, sep=""))))
}
# initialize df for storing results in orderly fashion
scopus_results <- data.frame(article_id = character(),
article_title = character(),
dataset_id = character())
# extract relevant information from raw results
for (i in 1:length(results)) {
num_citations <- as.numeric(results[[i]][["search-results"]][["opensearch:totalResults"]])
article_id <- results[[i]][["search-results"]][["entry"]][["prism:doi"]]
article_title <- results[[i]][["search-results"]][["entry"]][["dc:title"]]
dataset_id <- rep(identifiers[i], num_citations)
scopus_results <- rbind(scopus_results, data.frame(article_id,article_title,dataset_id))
}
# clean up dois
scopus_results <- scopus_results %>%
mutate(dataset_id = gsub("ALL:", "", dataset_id))
return(scopus_results)
}
check_identifiers <- function(identifiers){
if (any(!grepl("10\\.|urn:uuid", identifiers))){
warning(call. = FALSE,
"One or more identifiers does not appear to be a DOI or uuid",
immediate. = TRUE)
}
if (any(grepl("doi:|urn:uuid", identifiers))){
identifiers <- gsub("(doi:)|(urn:uuid:)", "", identifiers)
}
if (any(grepl(":", identifiers))){
identifiers <- gsub(":", "", identifiers) # handle other problematic colons
}
return(identifiers)
}
result_plos <- citation_search_plos(identifiers)
result_bmc <- citation_search_bmc(identifiers)
brute_force_query_master(_)
brute_force_query_master()
#' Brute force query
#'
#' @import dplyr
#' @import jsonlite
#' @import xml2
#' @import curl
#' @import dataone
#' @importFrom utils write.csv
brute_force_query_master <- function() {
## bash SCOPUS queries
# Need to use our API key in links below (saved separately)
#
# # multi-page ADC
# for pg in 0 26; do curl https://api.elsevier.com/content/search/scopus?query=ALL:10.18739\&date=2009-2019\&APIKey=${APIKEY}\&start=${pg} -o results/scopus-10.18739-2009-2019-pg${pg}.json; done
#
# # multi-page KNB
# for pg in 0 26; do curl https://api.elsevier.com/content/search/scopus?query==ALL:10.5063\&date=2009-2019\&APIKey=${APIKEY}\&start=${pg} -o results/scopus-10.5063-2009-2019-pg${pg}.json; done
# query for ADC DOIs
cn <- CNode("PROD")
mn <- getMNode(cn, "urn:node:ARCTIC")
result <-
query(mn, list(
q = "formatType:METADATA AND (*:* NOT obsoletedBy:*)",
fl = "identifier,rightsHolder,formatId",
start = "0",
rows = "15000"),
as = "data.frame"
)
dois <- grep("doi", result$identifier, value = T) %>%
gsub(pattern="doi:", replacement="")
# brute force query SCOPUS for each DOI
t <- list()
for (i in 1:length(dois)) {
t[[i]] <-
fromJSON(curl(paste0("https://api.elsevier.com/content/search/scopus?query=ALL:", dois[i], "&APIKey=ae55f95a9d2f56c21147d3f9f6c4eef0")
))
}
# find the number of results per DOI
res <-
lapply(t, function(x) {
x$`search-results`$`opensearch:totalResults`
})
# filter out DOIs with no results
t_working <- t[which(res != 0)]
# pull out information for datasets with results
t_results <- lapply(t_working, function(x) {
x$`search-results`$entry$search <-
x$`search-results`$`opensearch:Query`$`@searchTerms`
return(x$`search-results`$entry)
})
results <- do.call(bind_rows, t_results)
# trim out unnecessary information
results_slim <- results %>%
dplyr::select(.data$`prism:doi`, search) %>%
mutate(search = gsub("ALL:", "", search)) %>%
rename(
journal = .data$`prism:doi`,
adc_dataset = .data$search
)
# left col - citer, right col - citee
write.csv(
results_slim,
"~/dataone-citations/results/brute_force_results.csv",
row.names = F
)
}
brute_force_query_master()
knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
library(readr)
library(dplyr)
target_ids <- read_csv("citation_search/adc_publication_keyword_search_all_complete.csv") #%>%
setwd("Documents/R")
setwd("/Documents/R")
setwd("~/Documents/R")
ls
ls()
getwd()
target_ids <- read_csv("citation_search/adc_publication_keyword_search_all_complete.csv") #%>%
getwd()
target_ids <- read_csv("~/citation_search/adc_publication_keyword_search_all_complete.csv") #%>%
target_ids <- read_csv("/citation_search/adc_publication_keyword_search_all_complete.csv") #%>%
target_ids <- read_csv("citation_search/adc_publication_keyword_search_all_complete.csv") #%>%
target_ids <- read_csv("citation_search/adc_publication_keyword_search_all_complete.csv") #%>%
head(target_ids)
target_ids
head(target_ids)
?left_join
target_ids <- target_ids %>%
rename(source_id = article_doi, target_id = dataset_id)
head(target_ids)
target_and_source <- left_join(source_ids, target_ids, by=source_id) %>%
select(c(source_id, target_id))
head(target_and_source)
target_and_source <- left_join(source_ids, target_ids, by=source_id)
target_and_source <- left_join(source_ids, target_ids, by="source_id")
head(target_and_source)
target_and_source
View(source_ids)
View(target_ids)
View(target_and_source)
source_ids <-as.data.frame(fromJSON(txt = "citation_pairs/abs_cit_missing_target_id.json")) %>%
select(source_id)
source_ids <-as.data.frame(fromJSON(txt = "citation_pairs/abs_cit_missing_target_id.json")) %>%
select("source_id")
source_ids <-as.data.frame(fromJSON("citation_pairs/abs_cit_missing_target_id.json")) %>%
select("source_id")
knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
library(readr)
library(dplyr)
source_ids <-as.data.frame(fromJSON("citation_pairs/abs_cit_missing_target_id.json")) %>%
select("source_id")
getwd()
source_ids <-as.data.frame(fromJSON("citation_pairs/abs_cit_missing_target_id.json")) %>%
select("source_id")
source_ids <-as.data.frame(fromJSON("citation_pairs/abs_cit_missing_target_id.json")) %>%
select("source_id")
source_ids <-as.data.frame(fromJSON("citation_pairs/abs_cit_missing_target_id.json")) %>%
select("source_id")
source_ids <-as.data.frame(fromJSON("citation_pairs/abs_cit_missing_target_id.json")) %>%
select("source_id")
#source_ids <-as.data.frame(fromJSON("citation_pairs/abs_cit_missing_target_id.json")) %>%
# select("source_id")
head(source_ids)
source_ids <- select(source_ids, "source_id")
head(source_ids)
target_ids <- target_ids %>%
rename(source_id = article_doi, target_id = dataset_id) %>%
select(source_id, target_id)
target_ids <- read_csv("citation_search/adc_publication_keyword_search_all_complete.csv")
target_ids <- read_csv("/citation_search/adc_publication_keyword_search_all_complete.csv")
setwd(~/Documents/R)
setwd(~Documents/R)
setwd("~/Documents/R")
ls
target_ids <- read_csv("/citation_search/adc_publication_keyword_search_all_complete.csv")
target_ids <- read_csv("citation_search/adc_publication_keyword_search_all_complete.csv")
target_ids <- target_ids %>%
rename(source_id = article_doi, target_id = dataset_id) %>%
select(c("source_id, target_id"))
target_ids <- target_ids %>%
rename(source_id = article_doi, target_id = dataset_id) %>%
select(c("article_doi, dataset_id"))
head(target_ids)
target_ids <- target_ids %>%
rename(source_id = article_doi, target_id = dataset_id) #%>%
#select(c("source_id, target_id"))
head(target_ids)
target_ids <- select(target_ids, c("source_id", "targeet_id"))
target_ids <- select(target_ids, c("source_id", "target_id"))
head(target_ids)
View(source_ids)
View(target_ids)
target_and_source <- left_join(source_ids, target_ids, by="source_id")
View(target_and_source)
View(source_ids)
View(target_ids)
target_and_source <- left_join(source_ids, target_ids, by="source_id")
View(target_and_source)
target_ids <- as.data.frame(fromJSON("abs_cit.json") )
#target_ids <- select(target_ids, c("source_id", "target_id"))
head(target_ids)
View(target_ids)
target_ids <- read_csv("adc_publication_keyword_search_all_complete.csv")
setwd("~/Documents/R")
target_ids <- read_csv("adc_publication_keyword_search_all_complete.csv")
target_ids <- read_csv("adc_publication_keyword_search_all_complete.csv")
knitr::opts_knit$set(root.dir = normalizePath(path="/Users/samet/Documents/R"))
library(jsonlite)
library(readr)
library(dplyr)
library(knitr)
library(stringr)
target_and_source <- target_and_source[,c(target_id,source_id)]
knitr::opts_knit$set(root.dir = normalizePath(path="/Users/samet/Documents/R"))
library(jsonlite)
library(readr)
library(dplyr)
library(knitr)
library(stringr)
source_ids <-as.data.frame(fromJSON("citation_pairs/abs_cit_missing_target_id.json")) %>%
select("source_id")
head(source_ids)
target_ids <- read_csv("citation_search/adc_publication_keyword_search_all_complete.csv")
# regex for trimming dois
regex <- "(?:10\\..*)|(?:urn.*)"
target_ids <- target_ids %>%
mutate(article_doi=str_extract(article_doi, regex),
dataset_id=str_extract(dataset_id, regex)) %>%
rename(source_id = article_doi, target_id = dataset_id) %>%
filter(is_cited=="y") %>%
select(c("source_id", "target_id"))
head(target_ids)
errored_source_ids <- toupper(source_ids$source_id)
target_and_source <- target_ids %>%
filter(source_id %in% errored_source_ids)
head(target_and_source)
target_and_source[25,2] <- "10.18739/A22J6846K"
target_and_source <- target_and_source[,c(target_id,source_id)]
target_and_source <- target_and_source[,c(target_and_source[target_id],target_and_source[source_id])]
target_and_source <- target_and_source[,c(target_and_source$target_id,target_and_source$source_id)]
target_and_source <- target_and_source[c(target_and_source$target_id,target_and_source$source_id),]
head(target_and_source)
errored_source_ids <- toupper(source_ids$source_id)
target_and_source <- target_ids %>%
filter(source_id %in% errored_source_ids)
head(target_and_source)
target_and_source[25,2] <- "10.18739/A22J6846K"
target_and_source <- target_and_source[c(target_and_source$target_id,target_and_source$source_id),]
head(target_and_source)
target_and_source <- c(target_and_source$target_id,target_and_source$source_id)
head(target_and_source)
errored_source_ids <- toupper(source_ids$source_id)
target_and_source <- target_ids %>%
filter(source_id %in% errored_source_ids)
head(target_and_source)
target_and_source[25,2] <- "10.18739/A22J6846K"
errored_source_ids <- toupper(source_ids$source_id)
target_and_source <- target_ids %>%
filter(source_id %in% errored_source_ids)
head(target_and_source)
target_and_source[25,2] <- "10.18739/A22J6846K"
target_and_source <- subset(target_and_source, select = c(2, 1))
head(target_and_source)
#change column order
target_and_source <- subset(target_and_source, select = c(2, 1)) %>%
#add relation_type
mutate(relation_type="isReferencedBy")
head(target_and_source)
abs_cit_errored_fix <- toJSON(target_and_source)
write(abs_cit_errored_fix, "abs_cit_errored_fix.json")
errored_source_ids <- toupper(source_ids$source_id)
target_and_source <- target_ids %>%
filter(source_id %in% errored_source_ids)
head(target_and_source)
target_and_source[25,2] <- "10.18739/A22J6846K"
#change column order
target_and_source <- subset(target_and_source, select = c(2, 1)) %>%
#add relation_type
mutate(relation_type="isReferencedBy")
head(target_and_source)
abs_cit_errored_fix <- toJSON(target_and_source)
write(abs_cit_errored_fix, "abs_cit_errored_fix.json")
library(ggplot2)
getwd()
library(readr)
adc_author_ds_totals <- read_csv("adc_author_ds_totals.csv")
?ggplot
ggplot(adc_author_ds_totals,aes(x=number_of_datasets_authored)) +
stat_bin(binwidth=1) +
stat_bin(binwidth=1, geom="text", aes(label=..count..), vjust=-1.5)
ggplot(adc_author_ds_totals,aes(x=number_of_datasets_authored)) +
stat_bin(binwidth=1) +
stat_bin(binwidth=1, geom="text",  vjust=-1.5)
label=..count..
ggplot(adc_author_ds_totals,aes(x=number_of_datasets_authored)) +
stat_bin(binwidth=1) +
stat_bin(binwidth=1, geom="text", aes(label=..count..), vjust=-1.5)
ggplot(adc_author_ds_totals,aes(x=number_of_datasets_authored)) +
stat_bin(binwidth=1) +
stat_bin(binwidth=1, aes(label=..count..), vjust=-1.5)
ggplot(adc_author_ds_totals,aes(x=number_of_datasets_authored)) +
stat_bin(binwidth=1, xlim=50) +
stat_bin(binwidth=1, aes(label=..count..), vjust=-1.5)
ggplot(adc_author_ds_totals,aes(x=number_of_datasets_authored)) +
stat_bin(binwidth=1) +
stat_bin(binwidth=1, aes(label=..count..), vjust=-1.5, xlim=50)
ggplot(adc_author_ds_totals,aes(x=number_of_datasets_authored), xlim=50) +
stat_bin(binwidth=1) +
stat_bin(binwidth=1, aes(label=..count..), vjust=-1.5, xlim=50)
?ggplot
ggplot(data = adc_author_ds_totals, aes(x=number_of_datasets_authored)) +
geom_flat_violin(position = position_nudge(x = .2, y = 0), alpha = .8) +
geom_point(aes(x = x=number_of_datasets_authored), position = position_jitter(width = .15), size = .5, alpha = 0.8) +
geom_boxplot(width = .1, guides = FALSE, outlier.shape = NA, alpha = 0.5) +
expand_limits(x = 5.25) +
guides(fill = FALSE) +
guides(color = FALSE) +
scale_color_brewer(palette = "Spectral") +
scale_fill_brewer(palette = "Spectral") +
# coord_flip() +
theme_bw() +
raincloud_theme
rlang::last_error()
ggplot(data = adc_author_ds_totals, aes(x=number_of_datasets_authored)) +
geom_flat_violin(position = position_nudge(x = .2, y = 0), alpha = .8) +
geom_point(aes(x = x=number_of_datasets_authored), position = position_jitter(width = .15), size = .5, alpha = 0.8) +
geom_boxplot(width = .1, guides = FALSE, outlier.shape = NA, alpha = 0.5) +
expand_limits(x = 5.25)
ggplot(data = adc_author_ds_totals, aes(x=number_of_datasets_authored)) +
geom_flat_violin(position = position_nudge(x = .2, y = 0), alpha = .8) +
geom_point(aes(x = x=number_of_datasets_authored), position = position_jitter(width = .15), size = .5, alpha = 0.8) +
geom_boxplot(width = .1, alpha = 0.5) +
expand_limits(x = 5.25)
ggplot(data = adc_author_ds_totals, aes(x=number_of_datasets_authored)) +
geom_flat_violin(position = position_nudge(x = .2, y = 0), alpha = .8) +
geom_point(aes(x = x=number_of_datasets_authored), position = position_jitter(width = .15), size = .5, alpha = 0.8) +
geom_boxplot(width = .1, alpha = 0.5) +
expand_limits(x = 5.25)
ggplot(data = adc_author_ds_totals, aes(x=number_of_datasets_authored)) +
geom_flat_violin(position = position_nudge(x = .2, y = 0), alpha = .8)
library(ggplot2)
library(readr)
library(tidyr)
library(Hmisc)
library(plyr)
library(RColorBrewer)
library(reshape2)
ggplot(data = adc_author_ds_totals, aes(x=number_of_datasets_authored)) +
geom_flat_violin(position = position_nudge(x = .2, y = 0), alpha = .8)
?geom_flat_violin
??geom_flat_violin()
geom_violin
ggplot(data = adc_author_ds_totals, aes(x=number_of_datasets_authored)) +
geom_violin(position = position_nudge(x = .2, y = 0), alpha = .8)
ggplot(data = adc_author_ds_totals, aes(y=number_of_datasets_authored)) +
geom_violin(position = position_nudge(x = .2, y = 0), alpha = .8)
ggplot(data = adc_author_ds_totals, aes(x="stub", y=number_of_datasets_authored)) +
geom_violin(position = position_nudge(x = .2, y = 0), alpha = .8)
ggplot(data = adc_author_ds_totals, aes(x="stub", y=number_of_datasets_authored)) +
geom_violin(position = position_nudge(x = .2, y = 0), alpha = .8)
ggplot(data = adc_author_ds_totals, aes(x="stub", y=number_of_datasets_authored)) +
geom_violin(position = position_nudge(x = .2, y = 0), alpha = .8) +
geom_point(aes(x = x=number_of_datasets_authored), position = position_jitter(width = .15), size = .5, alpha = 0.8) +
ggplot(data = adc_author_ds_totals, aes(x="stub", y=number_of_datasets_authored)) +
geom_violin(position = position_nudge(x = .2, y = 0), alpha = .8) +
geom_point(aes(x=number_of_datasets_authored), position = position_jitter(width = .15), size = .5, alpha = 0.8) +
c
ggplot(data = adc_author_ds_totals, aes(x="stub", y=number_of_datasets_authored)) +
geom_violin(position = position_nudge(x = .2, y = 0), alpha = .8) +
geom_point(aes(x=number_of_datasets_authored), position = position_jitter(width = .15), size = .5, alpha = 0.8)
ggplot(data = adc_author_ds_totals, aes(x="stub", y=number_of_datasets_authored)) +
geom_violin(position = position_nudge(x = .2, y = 0), alpha = .8) +
geom_point(aes(y=number_of_datasets_authored), position = position_jitter(width = .15), size = .5, alpha = 0.8)
ggplot(data = adc_author_ds_totals, aes(x="stub", y=number_of_datasets_authored)) +
geom_violin(position = position_nudge(x = .2, y = 0), alpha = .8) +
geom_point(aes(y=number_of_datasets_authored), position = position_jitter(width = .15), size = .5, alpha = 0.8) +
geom_boxplot(width = .1, alpha = 0.5) +
c
ggplot(data = adc_author_ds_totals, aes(x="stub", y=number_of_datasets_authored)) +
geom_violin(position = position_nudge(x = .2, y = 0), alpha = .8) +
geom_point(aes(y=number_of_datasets_authored), position = position_jitter(width = .15), size = .5, alpha = 0.8) +
geom_boxplot(width = .1, alpha = 0.5)
ggplot(data = adc_author_ds_totals, aes(x="stub", y=number_of_datasets_authored)) +
geom_violin(position = position_nudge(x = .2, y = 0), alpha = .8) +
geom_point(aes(y=number_of_datasets_authored), position = position_jitter(width = .15), size = .5, alpha = 0.8) #+
ggplot(data = adc_author_ds_totals, aes(x="stub", y=number_of_datasets_authored)) +
geom_violin(position = position_nudge(x = .2, y = 0), alpha = .8) +
geom_point(aes(y=number_of_datasets_authored), position = position_jitter(width = .15), size = .5, alpha = 0.8) +
geom_boxplot(width = .1, alpha = 0.5)
ggplot(data = adc_author_ds_totals, aes(x="stub", y=number_of_datasets_authored)) +
geom_violin(position = position_nudge(x = .2, y = 0), alpha = .8) +
geom_point(aes(y=number_of_datasets_authored), position = position_jitter(width = .15), size = .5, alpha = 0.8) +
geom_boxplot(width = .1, guides = FALSE, outlier.shape = NA, alpha = 0.5)
ggplot(data = adc_author_ds_totals, aes(x="stub", y=number_of_datasets_authored)) +
geom_violin(position = position_nudge(x = .2, y = 0), alpha = .8) +
geom_point(aes(y=number_of_datasets_authored), position = position_jitter(width = .15), size = .5, alpha = 0.8) +
geom_boxplot(width = .1, alpha = 0.5)
ggplot(data = adc_author_ds_totals, aes(x="stub", y=number_of_datasets_authored)) +
geom_violin(position = position_nudge(x = .2, y = 0), alpha = .8) +
geom_point(aes(y=number_of_datasets_authored), position = position_jitter(width = .15), size = .5, alpha = 0.8) +
geom_boxplot(width = .1, alpha = 0.5, position = position_nudge(x = -.2, y = 0))
ggplot(data = adc_author_ds_totals, aes(x="stub", y=number_of_datasets_authored)) +
geom_violin(position = position_nudge(x = .2, y = 0), alpha = .8) +
geom_point(aes(y=number_of_datasets_authored), position = position_jitter(width = .15), size = .5, alpha = 0.8) +
geom_boxplot(width = .1, alpha = 0.5, position = position_nudge(x = -.4, y = 0))
regex <- "(?:10\\..*)|(?:urn.*)"
dbo_cits <- read_csv("dbo_cit_raw.csv") %>%
mutate(article_doi=str_extract(article_doi, regex),
dataset_doi=str_extract(dataset_doi, regex)) %>%
select(c(dataset_doi, article_doi, cit_type)) %>%
rename(source_id = article_doi, target_id = dataset_doi, relationType = cit_type)
library(jsonlite)
library(readr)
library(dplyr)
library(knitr)
library(stringr)
regex <- "(?:10\\..*)|(?:urn.*)"
dbo_cits <- read_csv("dbo_cit_raw.csv") %>%
mutate(article_doi=str_extract(article_doi, regex),
dataset_doi=str_extract(dataset_doi, regex)) %>%
select(c(dataset_doi, article_doi, cit_type)) %>%
rename(source_id = article_doi, target_id = dataset_doi, relationType = cit_type)
setwd("~/Documents/R/citation_search")
regex <- "(?:10\\..*)|(?:urn.*)"
dbo_cits <- read_csv("dbo_cit_raw.csv") %>%
mutate(article_doi=str_extract(article_doi, regex),
dataset_doi=str_extract(dataset_doi, regex)) %>%
select(c(dataset_doi, article_doi, cit_type)) %>%
rename(source_id = article_doi, target_id = dataset_doi, relationType = cit_type)
head(dbo_cits)
dbo_cits <- toJSON(dbo_cits)
dbo_cits <- read_csv("dbo_cit_raw.csv") %>%
mutate(article_doi=str_extract(article_doi, regex),
dataset_doi=str_extract(dataset_doi, regex)) %>%
select(c(dataset_doi, article_doi, cit_type)) %>%
rename(source_id = article_doi, target_id = dataset_doi, relationType = cit_type)
abs_cits_2 <- read_csv("adc_publication_keyword_search_september_work.csv") %>%
mutate(relationType = ifelse(relationType=="isCited", "Cites", relationType)) %>%
filter(cit=="y") %>%
select(c(source_id, target_id, relationType))
found_cit <- read_csv("found_citations.csv") %>%
rename(source_id = article_doi, target_id = dataset_doi) %>%
select(c(source_id, target_id, relationType))
### toolik citations
toolik_cit <- read_csv("toolik_citations.csv") %>%
rename(source_id = article_doi, target_id = dataset_doi, relationType = relation_type) %>%
filter(!is.na(target_id)) %>%
select(c(source_id, target_id, relationType))
### abs cit pt 1 citations
abs_cits_1 <- read_csv("adc_citation_keyword_search_part1.csv") %>%
rename(source_id = article_doi, target_id = dataset_id) %>%
filter(!is.na(source_id)) %>%
select(c(source_id, target_id))
nrow(toolik_ct)
dbo_cits <- toJSON(dbo_cits)
write(dbo_cits, "dbo_cits.json")
abs_cits_2 <- toJSON(abs_cits_2)
write(abs_cits_2, "abs_cit_part_2.json")
found_cit <- toJSON(found_cit)
toolik_cit <- toJSON(toolik_cit)
abs_cits_1 <- toJSON(abs_cits_1)
toolik_ct <- fromJSON(toolik_cit)
scythe_ct <- fromJSON("scythe_cit.json")
found_ct <- fromJSON(found_cit)
dbo_ct <- fromJSON(dbo_cits)
abs_ct_2 <- fromJSON(abs_cits_2)
abs_ct_1 <- fromJSON("abs_cit_part_1.json")
abs_ct_1_comp <-fromJSON("abs_cit_part_1_complete.json")
setwd("~/Documents/R/citation_pairs")
toolik_ct <- fromJSON(toolik_cit)
scythe_ct <- fromJSON("scythe_cit.json")
found_ct <- fromJSON(found_cit)
dbo_ct <- fromJSON(dbo_cits)
abs_ct_2 <- fromJSON(abs_cits_2)
abs_ct_1 <- fromJSON("abs_cit_part_1.json")
abs_ct_1_comp <-fromJSON("abs_cit_part_1_complete.json")
nrow(toolik_ct)
nrow(scythe_ct)
nrow(found_ct)
nrow(dbo_ct)
nrow(abs_ct_2)
nrow(abs_ct_1_comp)
